#!/home/dylan/miniconda3/envs/mlp/bin/python3

import rospy
from nn_threat_detector import RNNModel
from swarm_threat_detection.srv import batchIntruderCommandsResponse, batchIntruderCommands
from swarm_msgs.msg import resetSystem, initializeSystem, agentCommand
from keras.models import load_model
import keras
from sklearn.externals import joblib
from time import sleep
from swarmais.models import coeff_determination
initialized = False


def reset_callback(msg):
    global initialized
    if not initialized:
        return
    initialized = False


def nn_model_request(req):
    return
    if not initialized:
        return
    global rnnmodel
    try:
        delta_speeds, delta_headings, ids = rnnmodel.predict(req)
        commands = []
        for delta_speed, delta_heading, id in zip(delta_speeds, delta_headings, ids):
            command = agentCommand()
            command.delta_speed = delta_speed
            command.delta_heading = delta_heading
            command.sim_id = id
            commands.append(command)

    except Exception as e:
        rospy.loginfo(str(e.with_traceback()))
        rospy.logerr(str(e.with_traceback()))
        print(e.with_traceback())
        return
    resp = batchIntruderCommandsResponse()
    resp.batch_intruder_commands = commands
    return resp


def start_callback(msg):
    global initialized
    initialized = True


if __name__ == "__main__":
    rospy.init_node("nn_model_node")
    rospy.Subscriber('SystemStart', initializeSystem, start_callback)
    rospy.Subscriber('SystemReset', resetSystem, reset_callback)

    while not initialized and not rospy.is_shutdown():
        sleep(0.001)
    if rospy.is_shutdown():
        pass
    else:
        modelpth = rospy.get_param('swarm_threat_detection/modelpath')
        rospy.logerr(modelpth)
        model = load_model(modelpth, custom_objects={'coeff_determination':coeff_determination})

        normalizerspath = rospy.get_param('swarm_threat_detection/normalizerpath')
        xnormalizer = joblib.load(normalizerspath+"/xnormalizer")
        ynormalizer = joblib.load(normalizerspath+"/ynormalizer")
        seq_length = rospy.get_param('swarm_threat_detection/sequence_length')
        rnnmodel = RNNModel(model, xnormalizer, ynormalizer, seq_length)
        rospy.Service('IntruderModel', batchIntruderCommands, nn_model_request)
        rospy.loginfo("Initiating Threat Detection System")
        rospy.spin()
