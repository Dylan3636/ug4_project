#!/usr/bin/python3
from sklearn.model_selection import ParameterGrid
from tqdm import tqdm
from argparse import ArgumentParser
import subprocess
if __name__ == "__main__":
    parser = ArgumentParser(
        description="Evaluates RNNs over parameter grid"
    )
    parser.add_argument('-parsed_data',
                        action="store",
                        type=str,
                        dest="parsed_dataset_fp",
                        required=True)
    parser.add_argument('-graphlogdir',
                        action="store",
                        type=str,
                        dest="graphlogdir",
                        nargs="*",
                        default="graphlogs")
    parser.add_argument('-savedmodelsdir',
                        action="store",
                        type=str,
                        dest='models',
                        nargs="*",
                        default="models")
    parser.add_argument('-num_epochs',
                        action='store',
                        type=int,
                        default=1000)
    parser.add_argument('-colab',
                        action='store_true',
                        default=False)

    results = parser.parse_args()
    data_fp = results.parsed_dataset_fp
    graphdir = results.graphlogdir
    modelsdir = results.models
    num_epochs = results.num_epochs
    num_units = [128,
                 256]
    optimizers = ['Adam', 'RMSProp', 'SGD']
    iters_per_period = [100, 500]
    seq_lengths = [5, 10, 20]
    periods = [5]
    batch_sizes = [64]
    seeds = [0, 1, 2]

    grid = ParameterGrid(
        {
            'period': periods,
            'seq_length': seq_lengths,
            'num_lstm_units': num_units,
            'optimizer': optimizers,
            'total_iters_per_period': iters_per_period,
            'batch_size': batch_sizes,
            'seed': seeds

        }
    )
    print("Total number of fits {}".format(len(grid)))
    pbar = tqdm(len(grid))
    for params in grid:
        command = "evaluate_rnn_model -parsed_data {} -num_epochs {} ".format(
            data_fp,
            num_epochs)
        if type(graphdir) is str:
            graphstr = ""
        else:
            graphstr = "-graphlogdir "
            for part in graphdir:
                graphstr += part + " "
        if type(modelsdir) is str:
            modelstr = ""
        else:
            modelstr = "-savedmodelsdir "
            for part in modelsdir:
                modelstr += part + " "
        command += graphstr + modelstr

        print(command)
        if results.colab:
            command += "-colab "
            # command = "ipython -i " + command
        for key, value in params.items():
            command += "-{} {} ".format(key, value)
        pbar.set_description("Running command {}".format(command))
        pbar.update(1)
        print()
        p = subprocess.Popen(command, shell=True)
        p_status = p.wait()